generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  username        String   @unique
  password        String
  firstName       String
  lastName        String
  avatar          String?
  bio             String?
  company         String?
  position        String?
  industry        String?
  location        String?
  website         String?
  linkedin        String?
  twitter         String?
  phone           String?
  isVerified      Boolean  @default(false)
  subscriptionTier SubscriptionTier @default(FREE)
  reputation      Int      @default(0)
  tokens          Int      @default(0)
  networkValue    Decimal  @default(0)
  totalRevenue    Decimal  @default(0)
  lastActiveAt    DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  sentConnections     Connection[] @relation("Requester")
  receivedConnections Connection[] @relation("Receiver")
  sentMessages        Message[]    @relation("MessageSender")
  receivedMessages    Message[]    @relation("MessageReceiver")
  deals               Deal[]
  reviews             Review[]    @relation("ReviewReceiver")
  givenReviews        Review[]    @relation("ReviewGiver")
  analytics           UserAnalytics?
  subscription        Subscription?
  payments            Payment[]
  arCards             ARBusinessCard[]
  networkInsights     NetworkInsight[]
  aiMatches           AIMatch[]
  businessCards       BusinessCard[]

  @@map("users")
}

model Connection {
  id          String           @id @default(cuid())
  requesterId String
  receiverId  String
  status      ConnectionStatus @default(PENDING)
  message     String?
  matchScore  Float?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  requester User @relation("Requester", fields: [requesterId], references: [id])
  receiver  User @relation("Receiver", fields: [receiverId], references: [id])

  @@unique([requesterId, receiverId])
  @@map("connections")
}

model Message {
  id           String      @id @default(cuid())
  senderId     String
  receiverId   String
  content      String
  messageType  MessageType @default(TEXT)
  isRead       Boolean     @default(false)
  isEncrypted  Boolean     @default(true)
  attachments  String[]    @default([])
  createdAt    DateTime    @default(now())

  sender   User @relation("MessageSender", fields: [senderId], references: [id])
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id])

  @@map("messages")
}

model Deal {
  id              String     @id @default(cuid())
  userId          String
  title           String
  description     String
  value           Decimal?
  currency        String     @default("USD")
  status          DealStatus @default(NEGOTIATING)
  partnerId       String?
  commission      Decimal?
  platformFee     Decimal?
  contractUrl     String?
  completedAt     DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("deals")
}

model Review {
  id         String @id @default(cuid())
  reviewerId String
  revieweeId String
  rating     Int // 1-5 stars
  comment    String?
  dealId     String?
  isVerified Boolean @default(false)
  createdAt  DateTime @default(now())

  reviewer User @relation("ReviewGiver", fields: [reviewerId], references: [id])
  reviewee User @relation("ReviewReceiver", fields: [revieweeId], references: [id])

  @@unique([reviewerId, revieweeId, dealId])
  @@map("reviews")
}

model Subscription {
  id                String             @id @default(cuid())
  userId            String             @unique
  tier              SubscriptionTier
  status            SubscriptionStatus @default(ACTIVE)
  stripeCustomerId  String?            @unique
  stripeSubscriptionId String?         @unique
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean           @default(false)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

model Payment {
  id              String        @id @default(cuid())
  userId          String
  stripePaymentId String        @unique
  amount          Decimal
  currency        String        @default("USD")
  type            PaymentType
  status          PaymentStatus @default(PENDING)
  description     String?
  metadata        Json?
  createdAt       DateTime      @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("payments")
}

model UserAnalytics {
  id                    String   @id @default(cuid())
  userId                String   @unique
  profileViews          Int      @default(0)
  connectionsMade       Int      @default(0)
  messagesExchanged     Int      @default(0)
  dealsCompleted        Int      @default(0)
  totalRevenue          Decimal  @default(0)
  networkValue          Decimal  @default(0)
  lastActivityAt        DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("user_analytics")
}

model ARBusinessCard {
  id          String   @id @default(cuid())
  userId      String
  cardData    Json // AR card information
  qrCode      String?
  nftTokenId  String?  @unique
  isActive    Boolean  @default(true)
  scanCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("ar_business_cards")
}

model BusinessCard {
  id          String   @id @default(cuid())
  userId      String
  templateId  String?
  data        Json
  isActive    Boolean  @default(true)
  shareCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("business_cards")
}

model NetworkInsight {
  id            String   @id @default(cuid())
  userId        String
  insightType   String // "opportunity", "trend", "recommendation"
  title         String
  description   String
  confidence    Float // 0-1 confidence score
  actionable    Boolean  @default(true)
  priority      Int      @default(3) // 1-5 priority
  metadata      Json?
  isRead        Boolean  @default(false)
  expiresAt     DateTime?
  createdAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("network_insights")
}

model AIMatch {
  id                String   @id @default(cuid())
  userId            String
  matchedUserId     String?
  matchType         String // "business", "investment", "collaboration"
  score             Float // 0-1 match confidence
  reasons           String[]
  status            String @default("pending") // pending, accepted, rejected
  expiresAt         DateTime?
  createdAt         DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("ai_matches")
}

model MarketTrend {
  id          String   @id @default(cuid())
  industry    String
  trend       String
  impact      String // "high", "medium", "low"
  description String
  confidence  Float
  source      String
  relevantTo  String[] @default([]) // User IDs
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("market_trends")
}

model BusinessOpportunity {
  id           String   @id @default(cuid())
  title        String
  description  String
  industry     String
  location     String?
  estimatedValue Decimal?
  requirements String[]
  deadline     DateTime?
  contactInfo  Json?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("business_opportunities")
}

enum SubscriptionTier {
  FREE
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

enum MessageType {
  TEXT
  IMAGE
  DOCUMENT
  VOICE
  VIDEO
  AR_CARD
}

enum DealStatus {
  NEGOTIATING
  PENDING
  COMPLETED
  CANCELLED
  DISPUTED
}

enum PaymentType {
  SUBSCRIPTION
  DEAL_COMMISSION
  FEATURE_UNLOCK
  TOKENS
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}