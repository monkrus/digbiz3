# DigBiz3 Production Docker Compose Configuration
# AI-Powered Business Networking Platform

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: digbiz3-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-digbiz3}
      POSTGRES_USER: ${POSTGRES_USER:-digbiz3user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-securepassword123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend-api/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - digbiz3-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-digbiz3user} -d ${POSTGRES_DB:-digbiz3}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: digbiz3-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispassword123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - digbiz3-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Service
  backend-api:
    build:
      context: ./backend-api
      dockerfile: Dockerfile
    container_name: digbiz3-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://${POSTGRES_USER:-digbiz3user}:${POSTGRES_PASSWORD:-securepassword123}@postgres:5432/${POSTGRES_DB:-digbiz3}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redispassword123}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-here}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      BLOCKCHAIN_RPC_URL: ${BLOCKCHAIN_RPC_URL:-https://polygon-rpc.com}
      BLOCKCHAIN_PRIVATE_KEY: ${BLOCKCHAIN_PRIVATE_KEY}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:8081,https://digbiz3.com}
    volumes:
      - ./backend-api/uploads:/app/uploads
      - ./backend-api/logs:/app/logs
    ports:
      - "3000:3000"
    networks:
      - digbiz3-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # AI Engine Service
  ai-engine:
    build:
      context: ./ai-engine
      dockerfile: Dockerfile
    container_name: digbiz3-ai-engine
    restart: unless-stopped
    environment:
      FLASK_ENV: production
      PORT: 5000
      REDIS_URL: redis://:${REDIS_PASSWORD:-redispassword123}@redis:6379
      ML_SERVICE_URL: http://ai-engine:5000
    volumes:
      - ./ai-engine/models:/app/models
      - ./ai-engine/data:/app/data
    ports:
      - "5000:5000"
    networks:
      - digbiz3-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NGINX Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: digbiz3-nginx
    restart: unless-stopped
    depends_on:
      - backend-api
      - ai-engine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./infrastructure/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - digbiz3-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: digbiz3-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - digbiz3-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: digbiz3-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3001:3000"
    networks:
      - digbiz3-network

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: digbiz3-elasticsearch
    restart: unless-stopped
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xmx512m -Xms512m"
      xpack.security.enabled: false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - digbiz3-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: digbiz3-kibana
    restart: unless-stopped
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - digbiz3-network

  # Backup Service
  backup:
    build:
      context: ./infrastructure/backup
      dockerfile: Dockerfile
    container_name: digbiz3-backup
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB:-digbiz3}
      POSTGRES_USER: ${POSTGRES_USER:-digbiz3user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-securepassword123}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redispassword123}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET:-digbiz3-backups}
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}  # Daily at 2 AM
    volumes:
      - backup_data:/app/backups
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - digbiz3-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local
  backup_data:
    driver: local

networks:
  digbiz3-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16